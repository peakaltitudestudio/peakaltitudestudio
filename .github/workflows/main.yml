name: Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Configure AWS Usage
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Setup Terraform State Backend
      run: |
        aws_region="us-west-1"
        s3_bucket_name="tf-ci-state-storage-bucket"

        cd terraform
        # 2>/dev/null keeps it from erroring and continues execution
        if aws s3api head-bucket --bucket $s3_bucket_name --region $aws_region 2>/dev/null; then
          echo "S3 bucket already exists, skipping bucket creation."
        else
          cd pipeline-tf-create-bucket
          terraform init
          terraform apply -auto-approve
          cd ..
        fi
        mv ./pipeline-tf-backend/backend.tf ./backend.tf

    - name: Run Main Terraform
      env:
        TF_VAR_PREFIX: "ci-"
      run: |
        cd terraform
        terraform init
        terraform refresh
        terraform apply -auto-approve
        terraform refresh
        public_ip=$(terraform output -json public_ip | tr -d '"')
        echo "PUBLIC_IP=$public_ip" >> $GITHUB_ENV
        # Get the JSON output from Terraform and assign it to a variable
        json_output=$(terraform output -json "acm_dns_validation")

        # Use jq to extract the key and value
        acm_dns_validation_cname=$(echo "$json_output" | sed -n 's/{"\([^"]*\)":.*/\1/p')
        echo "DNS_CNAME=$acm_dns_validation_cname" >> $GITHUB_ENV
        acm_dns_validation_value=$(echo "$json_output" | sed -n 's/.*"\(.*\)".*/\1/p')
        echo "DNS_VALUE=$acm_dns_validation_value" >> $GITHUB_ENV
    
    - name: Server Details
      run: |
        echo "Public IPv4 Is: ${{ env.PUBLIC_IP }}"
        echo "DNS Validation CNAME Is: ${{ env.DNS_CNAME }}"
        echo "DNS Validation Value Is: ${{ env.DNS_VALUE }}"

    
    - name: Set up Docker
      run: |
        cd pas-website
        docker build . --tag ghcr.io/peakaltitudestudio/pas-website-ghrc:latest
        docker login -u ${{ secrets.DOCKER_USERNAME }} --password ${{ secrets.GHCR_TOKEN }} ghcr.io
        docker push ghcr.io/peakaltitudestudio/pas-website-ghrc:latest    

    - name: Deploy to EC2 Instance
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.PUBLIC_IP }}
        username: ec2-user
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        stript_stop: true
        script: |
          set -e
          container_id=$(docker ps -q)
          if [ -n "$container_id" ]; then
            docker kill $container_id
          fi
          echo 
          docker login -u ${{ secrets.DOCKER_USERNAME }} --password ${{ secrets.GHCR_TOKEN }} ghcr.io
          docker pull ghcr.io/peakaltitudestudio/pas-website-ghrc:latest
          docker run -d -p 3000:3000 ghcr.io/peakaltitudestudio/pas-website-ghrc

    - name: Copy Nginx Config
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.PUBLIC_IP }}
        username: ec2-user
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: nginx-config.conf
        target: /etc/nginx/conf.d/pas-website.conf      

    - name: Setup Nginx Server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.PUBLIC_IP }}
        username: ec2-user
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        stript_stop: true
        script: |
          set -e
          sudo systemctl reload nginx